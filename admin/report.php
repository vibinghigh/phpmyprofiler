<?php
/* phpMyProfiler
 * Copyright (C) 2004 by Tim Reckmann [www.reckmann.org] & Powerplant [www.powerplant.de]
 * Copyright (C) 2005-2014 The phpMyProfiler project
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
*/

define('_PMP_REL_PATH', '..');

$pmp_module = 'admin_report';

require_once('../config.inc.php');
require_once('../admin/include/functions.php');
define('FPDF_FONTPATH', '../admin/font/');
require_once('../admin/include/fpdf.php');
require_once('../include/smallDVD.class.php');

isadmin();

class PDF extends FPDF {
	function Header($evenonpageone = false) {
		if ( $evenonpageone || ($this->PageNo() != 1) ) {
			//Colors, line width and bold font
			$this->SetFillColor(150, 150, 150);
			$this->SetTextColor(255);
			$this->SetDrawColor(200, 200, 200);
			$this->SetLineWidth(.3);
			$this->SetFont('','B');

			for ($i=0; $i<count($this->header); $i++) {
				$this->Cell($this->colwidth[$i], 7, $this->truncTT($this->header[$i], $this->colwidth[$i]), 1, 0, 'C', 1);
			}
			$this->Ln();
		}
	}

	function truncTT($string, $width, $suffix = '...') {
		// We convert from utf8 to iso8859 too, because fpdf can't handle utf8
		if ( $this->GetStringWidth($string) > $width ) {
			if ( $suffix != '' ) {
				return $this->truncTT(mb_substr($string, 0, mb_strlen($string) - 2) . $suffix, $width, '');
			}
			else {
				return $this->truncTT(mb_substr($string, 0, mb_strlen($string) - 5) . '...', $width, '');
			}
		}
		else {
			return utf8_decode(html_entity_decode($string, ENT_QUOTES, 'UTF-8'));
		}
	}

	// Colored table
	function generateReport($header, $data) {
		global $pmp_version;
		$this->header = $header;
		$this->SetFont('Arial', '', 10);

		$ColCount = count($data[1]);
		// Average width
		$MaxWidth = $this->w - $this->lMargin - $this->rMargin;
		$AvgWidth = $MaxWidth / $ColCount;

		// Maximum width of columns
		for ($i=0; $i < count($data); $i++) {
			for ($j=0; $j < count($data[$i]); $j++) {
				if ( !isset($max[$j]) ) {
					$max[$j] = '';
				}
				$l = $this->GetStringWidth($data[$i][$j])+2;
				$max[$j] = ($l > $max[$j]) ? $l : $max[$j];
			}
		}

		$reqWidth = array_sum($max);

		//  Space?
		if ( $reqWidth < $MaxWidth ) {
			// Allocate Space
			$unused = $MaxWidth - $reqWidth;
			for ($i = 0; $i < count($max); $i++) {
				$colWidth[$i] = $max[$i] + $unused / $ColCount;
			}
		}
		else {
			// Allocate Space
			$saveWidth = $reqWidth - $MaxWidth;

			for ($i=0; $i< count($max); $i++) {
				if ( $max[$i] == max($max) ) {
					$colWidth[$i] = $max[$i] - $saveWidth;
				}
				else {
					$colWidth[$i] = $max[$i];
				}
			}
		}

		$this->colwidth = $colWidth;

		$this->SetFont('Arial', '', 20);
		$this->write(10, t("DVD list") . "\n");
		$this->SetFont('Arial','',10);

		$this->Header(true);
		$this->SetTextColor(0);
		$this->SetFont('');

		$fill = true;

		foreach ( $data as $row ) {
			if ( $fill ) {
				$this->SetFillColor(200, 200, 200);
			}
			else {
				$this->SetFillColor(255, 255, 255);
			}

			for ($i = 0; $i < count($this->colwidth); $i++) {
				$this->Cell($this->colwidth[$i], 5, $this->truncTT($row[$i], $this->colwidth[$i]) , 'LRB', 0, 'L', 1);
			}

			$this->SetFillColor(255, 255, 255);
			//$this->Cell(20, 5, '', 'L', 0, 'L', 1);
			$this->Ln();
			$fill = !$fill;
		}

		$this->SetFont('Arial', '' , 6);
		$this->SetX($this->w - $this->rMargin  - $this->GetStringWidth(t('Generated by ') . 'phpMyProfiler V' . $pmp_version) - 3);
		$this->Write(6, t('Generated by '));
		$this->SetFont('', 'U');
		$this->write(6, 'phpMyProfiler ' . $pmp_version, 'http://www.phpmyprofiler.de');
	}
}

unset($header);
if ( (isset($_GET['report'])) && ($_GET['report'] == 'pdf') ) {
	if ( !empty($_POST['col1']) ) $header[0] = html_entity_decode(t(getColumns($_POST['col1'], 'Header')));
	if ( !empty($_POST['col2']) ) $header[1] = html_entity_decode(t(getColumns($_POST['col2'], 'Header')));
	if ( !empty($_POST['col3']) ) $header[2] = html_entity_decode(t(getColumns($_POST['col3'], 'Header')));
	if ( !empty($_POST['col4']) ) $header[3] = html_entity_decode(t(getColumns($_POST['col4'], 'Header')));
	if ( !empty($_POST['col5']) ) $header[4] = html_entity_decode(t(getColumns($_POST['col5'], 'Header')));
	if ( !empty($_POST['col6']) ) $header[5] = html_entity_decode(t(getColumns($_POST['col6'], 'Header')));
}
else {
	if ( !empty($_POST['col1']) ) $header[0] = t(getColumns($_POST['col1'], 'Header'));
	if ( !empty($_POST['col2']) ) $header[1] = t(getColumns($_POST['col2'], 'Header'));
	if ( !empty($_POST['col3']) ) $header[2] = t(getColumns($_POST['col3'], 'Header'));
	if ( !empty($_POST['col4']) ) $header[3] = t(getColumns($_POST['col4'], 'Header'));
	if ( !empty($_POST['col5']) ) $header[4] = t(getColumns($_POST['col5'], 'Header'));
	if ( !empty($_POST['col6']) ) $header[5] = t(getColumns($_POST['col6'], 'Header'));
}

if ( (!empty($header)) && (is_array($header)) ) {
	dbconnect();
	if ( (isset($_GET['usequery'])) && ($_GET['usequery'] == 'true') ) {
		$sql = $_SESSION['list_sql'];
	}
	else {
		$sql = 'SELECT DISTINCT id FROM pmp_film';

		if ( $_POST['where'] == 'Owned' ) {
			$sql .= ' WHERE collectiontype = \'Owned\'';
		}
		else if ( $_POST['where'] == 'Ordered' ) {
			$sql .= ' WHERE collectiontype = \'Ordered\'';
		}
		else if ( $_POST['where'] == 'WishList' ) {
			$sql .= ' WHERE collectiontype = \'Wish List\'';
		}

		if ( !$_POST['sortby'] == "0" ) {
			$sql .= ' ORDER BY ';

			if ( $_POST['sortby'] == 1 ) {
				$sql .= 'title';
			}
			if ( $_POST['sortby'] == 2 ) {
				$sql .= 'prodyear';
			}
			if ( $_POST['sortby'] == 3 ) {
				$sql .= 'location';
			}
			if ( $_POST['sortby'] == 4 ) {
				$sql .= 'collectionnumber';
			}
			if ( $_POST['sortby'] == 5 ) {
				$sql .= 'purchdate';
			}
			if ( $_POST['sortby'] == 6 ) {
				$sql .= 'runningtime';
			}
			if ( $_POST['sortby'] == 7 ) {
				$sql .= 'purchprice';
			}
			if ( $_POST['sortby'] == 8 ) {
				$sql .= 'purchplace';
			}
			if ( $_POST['sortby'] == 9 ) {
				$sql .= 'disttrait';
			}

			if ( $_POST['sortdir'] == "asc" ) {
				$sql .= ' asc';
			}
			else if ( $_POST['sortdir'] == "desc" ) {
				$sql .= ' desc';
			}
		}
	}

	$res = dbexec($sql);
	if ( $_POST['report'] == 'html' ) {
		$columnoutput = 'Output';
	}
	else {
		$columnoutput = 'AltOutput';
	}

	while ( $row = mysqli_fetch_object($res) ) {
		$dvd = new smallDVD($row->id);
		if ( !empty($_POST['col1']) ) $tmpdata[0] = $dvd->get(getColumns($_POST['col1'], $columnoutput));
		if ( !empty($_POST['col2']) ) $tmpdata[1] = $dvd->get(getColumns($_POST['col2'], $columnoutput));
		if ( !empty($_POST['col3']) ) $tmpdata[2] = $dvd->get(getColumns($_POST['col3'], $columnoutput));
		if ( !empty($_POST['col4']) ) $tmpdata[3] = $dvd->get(getColumns($_POST['col4'], $columnoutput));
		if ( !empty($_POST['col5']) ) $tmpdata[4] = $dvd->get(getColumns($_POST['col5'], $columnoutput));
		if ( !empty($_POST['col6']) ) $tmpdata[5] = $dvd->get(getColumns($_POST['col6'], $columnoutput));
		unset($dvd);

		$data[] = $tmpdata;
	}

	if ( $_POST['report'] == 'html' ) {
		require_once('../include/pmp_Smarty.class.php');
		require_once('../admin/include/option.class.php');

		$smarty = new pmp_Smarty;
		$smarty->loadFilter('output', 'trimwhitespace');
		$smarty->compile_dir = '../templates_c';

		$smarty->assign('header', t('DVD list'));

		$smarty->assign('header_img', 'report');
		$smarty->assign('session', session_name() . "=" . session_id() );

		$smarty->assign('headers', $header);
		$smarty->assign('data', $data);

		$smarty->display('admin/report_list.tpl');
	}
	else if ( $_POST['report'] == 'pdf' ) {
		$pdf = new PDF();
		$pdf->AddPage();
		$pdf->generateReport($header, $data);
		$pdf->Output();
	}
}
else {
	require_once('../include/pmp_Smarty.class.php');
	require_once('../admin/include/option.class.php');

	$smarty = new pmp_Smarty;
	$smarty->loadFilter('output', 'trimwhitespace');
	$smarty->compile_dir = '../templates_c';

	$smarty->assign('header', t('Report'));
	$smarty->assign('header_img', 'report');
	$smarty->assign('session', session_name() . "=" . session_id() );

	$columns[] = new option('col1', 'Column 1', '', $pmp_menue_column_1, getColumnsasOption());
	$columns[] = new option('col2', 'Column 2', '', $pmp_menue_column_2, getColumnsasOption());
	$columns[] = new option('col3', 'Column 3', '', $pmp_menue_column_3, getColumnsasOption());
	$columns[] = new option('col4', 'Column 4', '', $pmp_menue_column_4, getColumnsasOption());
	$columns[] = new option('col5', 'Column 5', '', $pmp_menue_column_5, getColumnsasOption());
	$columns[] = new option('col6', 'Column 6', '', $pmp_menue_column_6, getColumnsasOption());

	$smarty->assign('columns', $columns);

	$smarty->display('admin/report.tpl');
}
?>
